.box.box-solid.box-primary{
border-bottom-color:#666666;
border-left-color:#666666;
border-right-color:#666666;
border-top-color:#666666;
}
")),
fluidRow(
box(width = 6, title = "youhou", status = "primary", solidHeader = TRUE,
"Box content"
)
)
)
)
server <- function(input, output) {}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
tags$style(HTML("
.box.box-solid.box-primary>.box-header {
color:#fff;
background:#666666
}
")),
fluidRow(
box(width = 6, title = "youhou", status = "primary", solidHeader = TRUE,
"Box content"
)
)
)
)
server <- function(input, output) {}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
tags$style(HTML("
.box.box-solid.box-primary>.box-header {
color:#fff;
background:#ffffff
}
")),
fluidRow(
box(width = 6, title = "youhou", status = "primary", solidHeader = TRUE,
"Box content"
)
)
)
)
server <- function(input, output) {}
shinyApp(ui, server)
runApp('H:/8. General/inv_app 1.1')
runApp('H:/8. General/inv_app 1.1')
runApp('H:/8. General/inv_app 1.1')
runApp('H:/8. General/inv_app 1.1')
runApp('H:/8. General/inv_app 1.1')
runApp('H:/8. General/inv_app 1.1')
runApp('H:/8. General/inv_app 1.1')
runApp('H:/8. General/inv_app 1.1')
runApp('H:/8. General/inv_app 1.1')
runApp('H:/8. General/inv_app 1.1')
runApp('H:/8. General/inv_app 1.1')
runApp('H:/8. General/inv_app 1.1')
runApp('H:/8. General/inv_app 1.1')
runApp('H:/8. General/inv_app 1.1')
shiny::runApp('G:/TEMP/Kenneth/Data Science Applications/ppf')
runApp('G:/TEMP/Kenneth/Data Science Applications/ppf')
runApp('G:/TEMP/Kenneth/Data Science Applications/ppf')
library("googleVis")
library("formattable")
library("datasets")
library("googleVis")
library("dplyr")
library("plyr")
library("readxl")
library("lubridate")
library("googleVis")
library("plotly")
library("taRifx")
library("qicharts2")
library("ggplot2")
library("grid")
library("gtable")
library("zoo")
library("ggQC")
#library(tidyverse)
library(reshape)
library(dbConnect)
library(odbc)
library(shinyjs)
library(udpipe)
library(textrank)
library(lattice)
library(igraph)
library(ggraph)
library(ggplot2)
library(textrank)
library(wordcloud)
library(mondate)
suppressMessages(library(data.table))
options(shiny.error = browser)
setwd("~/")
#functions----------
capFirst <- function(s) {
paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "")
}
readxl_allsheets <- function(filename, tibble = FALSE) {
# I prefer straight data.frames
# but if you like tidyverse tibbles (the default with read_excel)
# then just pass tibble = TRUE
sheets <- readxl::excel_sheets(filename)
x <- lapply(sheets, function(X) readxl::read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
x
}
#tot_fin----------------------
tot_all<-readxl_allsheets("Production Tracker 2019.xlsx")
tot_fin <- do.call("rbind.fill", tot_all)
tot_fin<- as.data.frame(subset(tot_fin, tot_fin$Category!= "Pro_total"))
tot_fin<- as.data.frame(subset(tot_fin, tot_fin$Category!="Progressive total"))
tot_fin$Category <- factor(tot_fin$Category, levels = unique(c(as.character(tot_fin$Category))))
#tot_fin$Month<-match(tot_fin$Category,month.abb)
tot<-as.data.frame(subset(tot_fin, subset = tot_fin$Title == "TOTact" |
tot_fin$Title == "TOTbud" | tot_fin$Title == "TOTplan1"))
tot_shp<-as.data.frame(subset(tot_fin, subset = tot_fin$Title == "CSact" |
tot_fin$Title == "DAact" | tot_fin$Title == "DPact" |
tot_fin$Title == "GBact" | tot_fin$Title == "GPact"))
#ppf--------
con <- dbConnect(odbc::odbc(), dsn = "vessel_all")
#check if tables exist
#dbExistsTable(con, "Vessel_All")
#find list of tablenames
#DBI::dbGetQuery(con, "select table_name from INFORMATION_SCHEMA.COLUMNS")
#setup table with SQL readable schema
table <- SQL("dbo.tPPFData")
prodsql <- dbConnect(odbc::odbc(), dsn = "productionSQL")
dlys <- SQL("dbo.vw_Delays")
dlys <- dbReadTable(prodsql, dlys)
dlys$vessel <- as.character(dlys$vessel)
#remove all empty spaces
dlys$vessel <- lapply(dlys$vessel,function(x)gsub('\\s+', '',x))
#last 30 days
dlys$recorddate=as.Date(dlys$recorddate, format='%d-%m-%YYY')
dlys <- dplyr::arrange(dlys, desc(recorddate))
dlys <- dlys[dlys$recorddate>=as.Date(Sys.Date() ,format='%d-%m-%YYY')-60,]
#ud_model <- udpipe_download_model(language = "english")
ppf <- dbReadTable(con, table)
ppf$ppf_Date <- as.Date(ppf$ppf_Date)
dplyr::mutate_all(ppfn[, 3:132], function(x) as.numeric(as.character(x))) ->ppfn[, 3:132]
ppf <- dplyr::arrange(ppf, desc(ppf_Date))
ppfn <- ppf
#ppfn <- ppfn %>% mutate_if(~is.numeric(.), function(x) rescale(x))
ppfn$planneddelays = ppf$pm_daily_act + ppfn$pos_daily_act + ppfn$weath_daily_act + ppfn$re_loc_daily_act + ppfn$ras_daily_act
ppfn$mining_dailyact[ppf$planneddelays>5] <- NA
ppfn$tot_area_daily_act[ppf$planneddelays>5] <- NA
ppfn$period = 1
#remove outliers
#boxplot(ppfn$tot_area_daily_act)$out
otla<- boxplot(ppfn$tot_area_daily_act , plot=FALSE)$out
ppfn <- ppfn[-which(ppfn$tot_area_daily_act %in% otla),]
ystd <- as.Date(format(Sys.Date()-1,"%Y-%m-%d"))
lstd <- as.Date(format(Sys.Date()-15,"%Y-%m-%d"))
## Notifications (Consignments)------
cnm <- SQL("dbo.tConsignment")
cnm <- dbReadTable(con, cnm)
tin <- SQL("dbo.tinview")
tin <- dbReadTable(prodsql, tin)
cnm$ConsignmentNo <- lapply(cnm$ConsignmentNo,function(x)gsub('\\s+', '',x))
tin$consignmentno <- lapply(tin$consignmentno,function(x)gsub('\\s+', '',x))
cnm <- dplyr::arrange(cnm, desc(ConsignmentTime))
cnm <- cnm[1:50,]
tin <- dplyr::arrange(tin, desc(allocyear,allocmonth))
tin <- tin[1:10000,]
tin <- as.data.frame(apply(tin,2,function(x)gsub('\\s+', '',x)))
tin %>%
dplyr::rename(
Vessel = vessel,
'Tin Code' = tincode,
Block = sequenceno,
'Spread No' = spreadno,
'Consignment No' = consignmentno,
Stones = stones,
Carats = carats,
Year = allocyear,
Month= allocmonth
) -> tinv
tinv %>%
dplyr::select(
Vessel, Block, 'Spread No', 'Consignment No', Stones, Carats, Year, Month) -> tinv
tinv$Carats <- as.numeric(tinv$Carats)
tinv$Stones <- as.numeric(tinv$Stones)
tinv <-aggregate(.~ Vessel + Block +`Spread No` + `Consignment No` + Year + Month , data = tinv, FUN=sum, na.rm=TRUE)
tinv %>%
dplyr::select(
everything(), Month, Year) -> tinv
cnm$Status = NA
cnm$Status <- ifelse(cnm$ConsignmentNo %in% tin$consignmentno,"LOADED", "PENDING" )
runApp('G:/TEMP/Kenneth/Data Science Applications/ppf')
runApp('G:/TEMP/Kenneth/Data Science Applications/ppf')
shiny::runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp()
c
c
c
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
shiny::runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
View(wds)
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
k
eds
wds
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
c
c
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
View(Phrases)
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
View(Phrases)
View(wds)
stringr::str_extract_all(Phrases[1,1], pattern))
stringr::str_extract_all(Phrases[1,1], pattern)
stringr::str_extract_all(Phrases[2,1], pattern)
stringr::str_extract_all(Phrases[3,1], pattern)
stringr::str_extract_all(Phrases[4,1], pattern)
View(Phrases)
View(wds)
isolate(stringr::str_extract_all(Phrases[3,1], pattern))
View(wds)
names(wds) <- names(NewPhrases)
NewPhrases <- data.frame("x"=character(0),"stat"=character(0))
names(wds) <- names(NewPhrases)
wds$stat <- paste(k[1], sep=" ")
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
View(N)
N$x <- sapply(strsplit(N$x, ","), function(i)
paste(unique(i), collapse = ","))
View(NewPhrases)
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
View(NewPhrases)
View(N)
footwall type, conglomerate, clay, sand, sandstone
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract_all(shopping_list, "\\d")
str_extract_all(shopping_list, "\\d", simplify = TRUE)
str_extract_all("This is, suprisingly, a sentence.", boundary("word")
str_extract_all("This is, suprisingly, a sentence.", boundary("word"))
z <- list(a = 1, b = "c", c = 1:3)
names(z)
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
View(Phrases)
pattern <- paste0("([^\\s]+\\s){0,0}","footwall type","(\\s[^\\s]+){0,0}")
wds <- isolate(data.frame(stringr::str_extract_all(Phrases[1,1], pattern)))
View(wds)
View(Phrases)
wds$stat <- paste("footwall type", sep=" ")
View(wds)
View(wds)
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
View(NewPhrases)
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp()
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
runApp('G:/TEMP/Kenneth/Data Science Applications/PDF Extraction App')
shiny::runApp('C:/Users/mwandingik/Box/Github/CD19')
shiny::runApp('C:/Users/mwandingik/Box/Github/CD19')
runApp('C:/Users/mwandingik/Box/Github/CD19')
runApp('C:/Users/mwandingik/Box/Github/CD19')
runApp('C:/Users/mwandingik/Box/Github/CD19')
library(shinybulma)
library(shiny)
shiny::shinyApp(
ui = bulmaNavbarPage(
bulmaNavbar(
bulmaNavbarBrand(
bulmaNavbarItem(
"shinybulma"
),
bulmaNavbarBurger()
),
bulmaNavbarMenu( # not visible on smaller devices
bulmaNavbarItem(
"Item 1"
),
bulmaNavbarItem(
"Item 2"
),
bulmaNavbarDropdown(
label = "Drop-down",
bulmaNavbarItem(
"Select 1"
),
bulmaNavbarItem(
"Select 2"
)
)
)
),
bulmaNav(
"Item 1",
bulmaTitle("Content for item 1 here.")
),
bulmaNav(
"Item 2",
bulmaTitle("Content for item 2 here.")
)
),
server = function(input, output) {}
)
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Ergo')
os <- import("os")
library(reticulate)
conda_create("heatmap")
conda_create("hp")
conda_remove("heatmap")
conda_create("hp")
use_condaenv("hp")
conda_install("hp", packages = c("folium", "beautifulsoup4", "progressbar2","ijson"))
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
use_python("C:\Users\mwandingik\AppData\Local\r-miniconda\envs\hp\")
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
use_condaenv("hp")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
virtualenv_list()
virtualenv_create("hp")
conda_remove("hp")
use_python("C:/Users/mwandingik/AppData/Roaming/Python/Python37/")
virtualenv_create("hp")
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/")
virtualenv_create("hp")
virtualenv_create("hp", python = "C:/Users/mwandingik/AppData/Local/r-miniconda/")
virtualenv_create("hp", python = "C:/Users/mwandingik/AppData/Local/r-miniconda/python.exe")
conda_remove("hp")
library(reticulate)
conda_create("hp")
use_condaenv("hp")
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe")
conda_install("hp", packages = c("folium", "beautifulsoup4", "progressbar2","ijson"))
conda_install("hp", "progressbar2")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
reticulate::py_config()
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe")
reticulate::py_config()
use_condaenv("hp")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
conda_install("hp", "python3.7")
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
conda_install("hp", "numpy")
use_condaenv("hp")
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
Error in py_run_file_impl(file, local, convert) :
AttributeError: module 'numpy.core' has no attribute 'numerictypes'
conda_list(conda = "auto")
conda_remove("hp", packages = "numpy")
library(reticulate)
conda_list(conda = "auto")
use_condaenv("hp")
conda_install("hp", "numpy")
conda_install("hp", "numpy")
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
conda_install("hp", "where")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe", required = T)
library(reticulate)
conda_list(conda = "auto")
use_condaenv("hp")
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe", required = T)
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
use_condaenv("hp")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
use_condaenv("hp")
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe", required = T)
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
conda_install("hp", packages = c("folium", "beautifulsoup4", "progressbar2","ijson","numpy"))
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe", required = T)
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
conda_install("hp", "where")
conda_install("hp", "certifi")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
library(reticulate)
conda_list(conda = "auto")
use_condaenv("hp")
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe", required = T)
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
conda_install("hp", "python3.8")
conda_install("hp", "python-3.8.2")
conda_install("hp", "python3.8.2")
conda_install("hp", "python=3.8.2")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
conda_install("hp", "python==3.8.2")
conda_remove("hp", packages = "python")
conda_install("hp", "python==3.8.2")
use_python("C:/Users/mwandingik/AppData/Roaming/Python/Python37/")
library(reticulate)
use_python("C:/Users/mwandingik/AppData/Roaming/Python/Python37/")
conda_install("hp", "python==3.8.2")
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe", required = T)
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
conda_install("hp", packages = c("folium", "beautifulsoup4", "progressbar2","ijson","numpy"))
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
py_config()
use_condaenv("hp")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
conda_install("hp", "pip")
py_config()
use_condaenv("hp")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
library(reticulate)
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/python.exe", required = T)
use_condaenv("hp")
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
conda_install(envname = NULL, packages = c("folium", "beautifulsoup4", "progressbar2","ijson","numpy"))
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/python.exe", required = T)
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/ python geo_heatmap.py takeout-20200320T061637Z-001.zip')
py_run_string('C:/Users/mwandingik/Box/Github/geo-heatmap/ python geo_heatmap.py takeout-20200320T061637Z-001.zip')
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe", required = T)
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe", required = T)
library(reticulate)
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe", required = T)
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
library(reticulate)
use_python("C:/Users/mwandingik/AppData/Local/r-miniconda/envs/hp/python.exe", required = T)
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
py_run_file('C:/Users/mwandingik/Box/Github/geo-heatmap/geo_heatmap.py')
shiny::runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Covid-19/App')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Covid-19/App')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Covid-19/App')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Covid-19/App')
runApp('C:/Users/mwandingik/Box/Ergo Analytics/Projects/Covid-19/App')
runApp('C:/Users/mwandingik/Box/Github/CD19')
shiny::runApp('G:/TEMP/Kenneth/Data Science Applications/KeyWord Exrtraction App')
setwd("G:/TEMP/Kenneth/Data Science Applications/KeyWord Exrtraction App")
